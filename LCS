Longest common Subsequence

Recursive
Approach:
To find the LCS ,1) first we need to think about iterating such as from Left to right or right to Left
2)Base case : since it string, and if we move from right to left then base condition would be size == 0
3)Recursive tree or choice diagram
There are two conditions:
s1 = ABCDGH  x = 6
s2 = AEDFHR  y = 6
i)if s1[5] == s2[5] then return 1 + LCS(x,y,s1-1,s2-1)
ii)if s1[5] != s2[5] then two more conditions :
since we have to choose maximum then calling two more conditons and taking maximum :
max(LCS(x-1,y,s1-1,s2),  //leave the current element and move 
    LCS(x,y-1,s1,s2-1) )  //leave the current element and move

and will get maximum of  these two

code:
//{ Driver Code Starts
#include<bits/stdc++.h>
const int mod=1e9+7;
using namespace std;

// } Driver Code Ends
// function to find longest common subsequence

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        if(x == 0 or y==0)
            return 0;
        if(s1[x-1] == s2[y-1])
            return 1 + lcs(x-1, y-1, s1, s2);
        else{
            return max(
                lcs(x-1, y, s1,s2);
                lcs(x, y-1, s1, s2);
                )
        }
        
    }
};
//{ Driver Code Starts.
int main()
{
    int t,n,k,x,y;
    cin>>t;
    while(t--)
    {
        cin>>x>>y;          // Take size of both the strings as input
        string s1,s2;
        cin>>s1>>s2;        // Take both the string as input
        Solution ob;
        cout << ob.lcs(x, y, s1, s2) << endl;
    }
    return 0;
}
// } Driver Code Ends

//Memoization (Bottom approach)
Declare a 2d matrix and save the calcuation result in matrix
int lcs_helper(int x, int y, string s1, string s2, int **dp){
        if(x == 0 or y==0)
            return 0;
        if(dp[x][y] != -1)
            return dp[x][y];
        if(s1[x-1] == s2[y-1])
            return dp[x][y] = 1 + lcs_helper(x-1, y-1, s1, s2,dp);
        else{
            return dp[x][y] = max(
                lcs_helper(x-1, y, s1,s2,dp),
                lcs_helper(x, y-1, s1, s2,dp)
                );
        }
    }
    
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        int **dp = new  int*[x+1];
        for(int i=0; i<=x; i++){
            dp[i] = new int[y+1];
            for(int j=0; j<=y; j++){
                dp[i][j] = -1;
            }
        }
        return lcs_helper(x,y,s1,s2,dp);
    }

Dp (Iterative)
int **dp = new int*[x+1];
        for(int i=0; i<=x; i++){
            dp[i] = new int[y+1];
        }
        //vector<vector<int>> dp(x+1,vector<int>(y+1,-1));
        for(int i=0; i<=x; i++){
            for(int j=0; j<=y; j++){
                if(i==0 or j==0)
                dp[i][j] = 0;
            }
        }
        for(int i=1; i<=x; i++){
            for(int j=1; j<=y; j++){
                if(s1[i-1] == s2[j-1]){
                    dp[i][j] = (1+dp[i-1][j-1]);
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[x][y];
