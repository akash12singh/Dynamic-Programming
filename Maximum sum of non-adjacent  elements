Problem link: https://www.codingninjas.com/studio/problems/maximum-sum-of-non-adjacent-elements_843261?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=3

1. Define a recursive function, that takes the array `nums` and the current index as parameters.

2. Define the base cases:
   - If the current index is less than 0 (out of bounds), return 0, indicating that we have reached the end of the array.
   - Otherwise, continue with the recursive calculations.

3. In each recursive call, consider two options:
   - Include the current element: Add the value of `nums[index]` to the maximum sum obtained from the subsequence ending at index `index - 2`. Call the function recursively with `index - 2`.
   - Exclude the current element: Call the function recursively with `index - 1`.

4. Return the maximum sum between the include and exclude options from step 3.

5. In the main function, call `findMaxSumRecursive` with the initial index set to `n - 1`, where `n` is the size of the array `nums`.

Here's an example of the recursive approach in pseudo-code:

```
function findMaxSumRecursive(nums, index):
    if index < 0:
        return 0

    include = nums[index] + findMaxSumRecursive(nums, index - 2)
    exclude = findMaxSumRecursive(nums, index - 1)

    return max(include, exclude)

function maximumNonAdjacentSum(nums):
    return findMaxSumRecursive(nums, size(nums) - 1)
```

This recursive approach recursively considers all possible subsequence combinations by either including or excluding the current element at each index.
It returns the maximum sum of a valid subsequence with the given constraint. However, note that the recursive approach may have exponential time complexity and may be inefficient for larger input sizes.
Memoization or dynamic programming can be applied to optimize the solution.

//Memoization
int sum_helper(vector<int>&nums, int n, vector<int>&dp ){
    if(dp[n] != -1) return dp[n];
    if(n == 0)
        return nums[n];
    if(n<0) return 0;

    int choose = nums[n] + sum_helper(nums,  n-2,dp);
    int notChoose = sum_helper(nums, n-1,dp);
    return dp[n] = max(choose, notChoose);
}


int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size();
    vector<int>dp(n,-1);

    return sum_helper(nums,n-1,dp);
  
}

//Tabulation 

int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size();
    vector<int>dp(n);
    dp[0] = nums[0];
    dp[1] = max(dp[0], nums[1]);
    for(int i=2; i<n; i++){
        int  include = nums[i] + dp[i-2];
        int exclude = 0 + dp[i-1] ;
        dp[i] = max(include, exclude);
    }

    return dp[n-1];
  } 
// Space optimization

int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size();
  
    int prev = nums[0];
    int prev1 = 0;
    for(int i=1; i<n; i++){
        int  include = nums[i] + prev1;
        int exclude = 0 + prev ;
       int curr = max(include, exclude);

       prev1 = prev;
       prev = curr;
    }

    return prev;
    

}
